<BSkyCanvas internalhelpfilename="{x:Null}" Title="Set Random Number Generator Seed" ModelClasses="{x:Null}" StatusTextBoxName="{x:Null}" customsyntax="{x:Null}" EditableComboBoxName="{x:Null}" RPackages="{x:Null}" CanExecute="True" PrereqCommandString="{x:Null}" CommandString="base::set.seed({{seedspinner}})" dlgsyntax="base::set.seed({{seedspinner}})" Helpfile="{x:Null}" splitProcessing="True" MenuLocation="{x:Null}" OutputDefinition="{x:Null}" Width="204" Command="False" Height="65" HelpText="&lt;html&gt;&lt;head&gt;&lt;style type=&quot;text/css&quot;&gt;.c0 { color: Black } .c1 { margin: 0px 0px 10px } .c2 { margin: 0px 0px 11px; font-size: 12.87px; font-weight: bold } .c3 { font-family: 'Courier New' } .c4 { font-weight: bold } .c5 { font-weight: bold; font-family: 'Courier New','Courier'; color: #666666 } .c6 { vertical-align: middle } .c7 { vertical-align: top } .c8 { margin: 0px 0px 12px } .c9 { margin: 0px 0px 0px 40px } .c10 { font-style: italic } .c11 { margin: 0px 0px 12px; text-align: center } .c12 { color: Blue; text-decoration: underline; font-family: 'Courier New' } &lt;/style&gt;&lt;/head&gt;&lt;body class=&quot;c0&quot;&gt;&lt;p class=&quot;c1&quot;&gt;&amp;#x200b;&lt;/p&gt;&lt;div class=&quot;c2&quot;&gt;Description&lt;/div&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c3&quot;&gt;.Random.seed&lt;/span&gt;&amp;#160;is an integer vector, containing the random number generator (RNG)&amp;#160;&lt;span class=&quot;c4&quot;&gt;state&lt;/span&gt;&amp;#160;for random number generation in&amp;#160;&lt;span&gt;&lt;span class=&quot;c5&quot;&gt;R&lt;/span&gt;&lt;/span&gt;. It can be saved and restored, but should not be altered by the user.&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c3&quot;&gt;RNGkind&lt;/span&gt;&amp;#160;is a more friendly interface to query or set the kind of RNG in use.&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c3&quot;&gt;RNGversion&lt;/span&gt;&amp;#160;can be used to set the random generators as they were in an earlier&amp;#160;&lt;span&gt;&lt;span class=&quot;c5&quot;&gt;R&lt;/span&gt;&lt;/span&gt;&amp;#160;version (for reproducibility).&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c3&quot;&gt;set.seed&lt;/span&gt;&amp;#160;is the recommended way to specify seeds.&lt;/p&gt;&lt;div class=&quot;c2&quot;&gt;Usage&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;c3&quot;&gt;.Random.seed &amp;lt;- c(rng.kind, n1, n2, \dots)&lt;br/&gt;&lt;br/&gt;RNGkind(kind = NULL, normal.kind = NULL)&lt;br/&gt;RNGversion(vstr)&lt;br/&gt;set.seed(seed, kind = NULL, normal.kind = NULL)&lt;br/&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;c2&quot;&gt;Arguments&lt;/div&gt;&lt;table&gt;&lt;col/&gt;&lt;col/&gt;&lt;tbody class=&quot;c6&quot;&gt;&lt;tr class=&quot;c7&quot;&gt;&lt;td class=&quot;c7&quot;&gt;&lt;span class=&quot;c3&quot;&gt;kind&lt;/span&gt;&lt;/td&gt;&lt;td class=&quot;c7&quot;&gt;&lt;p class=&quot;c8&quot;&gt;character or&amp;#160;&lt;span class=&quot;c3&quot;&gt;NULL&lt;/span&gt;. If&amp;#160;&lt;span class=&quot;c3&quot;&gt;kind&lt;/span&gt;&amp;#160;is a character string, set&amp;#160;&lt;span&gt;&lt;span class=&quot;c5&quot;&gt;R&lt;/span&gt;&lt;/span&gt;'s RNG to the kind desired. Use&amp;#160;&lt;span class=&quot;c3&quot;&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&amp;#160;to return to the&amp;#160;&lt;span&gt;&lt;span class=&quot;c5&quot;&gt;R&lt;/span&gt;&lt;/span&gt;&amp;#160;default. See ‘Details’ for the interpretation of&amp;#160;&lt;span class=&quot;c3&quot;&gt;NULL&lt;/span&gt;.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;c7&quot;&gt;&lt;td class=&quot;c7&quot;&gt;&lt;span class=&quot;c3&quot;&gt;normal.kind&lt;/span&gt;&lt;/td&gt;&lt;td class=&quot;c7&quot;&gt;&lt;p class=&quot;c8&quot;&gt;character string or&amp;#160;&lt;span class=&quot;c3&quot;&gt;NULL&lt;/span&gt;. If it is a character string, set the method of Normal generation. Use&amp;#160;&lt;span class=&quot;c3&quot;&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&amp;#160;to return to the&amp;#160;&lt;span&gt;&lt;span class=&quot;c5&quot;&gt;R&lt;/span&gt;&lt;/span&gt;&amp;#160;default.&amp;#160;&lt;span class=&quot;c3&quot;&gt;NULL&lt;/span&gt;&amp;#160;makes no change.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;c7&quot;&gt;&lt;td class=&quot;c7&quot;&gt;&lt;span class=&quot;c3&quot;&gt;seed&lt;/span&gt;&lt;/td&gt;&lt;td class=&quot;c7&quot;&gt;&lt;p class=&quot;c8&quot;&gt;a single value, interpreted as an integer, or&amp;#160;&lt;span class=&quot;c3&quot;&gt;NULL&lt;/span&gt;&amp;#160;(see ‘Details’).&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;c7&quot;&gt;&lt;td class=&quot;c7&quot;&gt;&lt;span class=&quot;c3&quot;&gt;vstr&lt;/span&gt;&lt;/td&gt;&lt;td class=&quot;c7&quot;&gt;&lt;p class=&quot;c8&quot;&gt;a character string containing a version number, e.g.,&amp;#160;&lt;span class=&quot;c3&quot;&gt;&amp;quot;1.6.2&amp;quot;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;c7&quot;&gt;&lt;td class=&quot;c7&quot;&gt;&lt;span class=&quot;c3&quot;&gt;rng.kind&lt;/span&gt;&lt;/td&gt;&lt;td class=&quot;c7&quot;&gt;&lt;p class=&quot;c8&quot;&gt;integer code in&amp;#160;&lt;span class=&quot;c3&quot;&gt;0:k&lt;/span&gt;&amp;#160;for the above&amp;#160;&lt;span class=&quot;c3&quot;&gt;kind&lt;/span&gt;.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;c7&quot;&gt;&lt;td class=&quot;c7&quot;&gt;&lt;span class=&quot;c3&quot;&gt;n1, n2, ...&lt;/span&gt;&lt;/td&gt;&lt;td class=&quot;c7&quot;&gt;&lt;p class=&quot;c8&quot;&gt;integers. See the details for how many are required (which depends on&amp;#160;&lt;span class=&quot;c3&quot;&gt;rng.kind&lt;/span&gt;).&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class=&quot;c2&quot;&gt;Details&lt;/div&gt;&lt;p class=&quot;c1&quot;&gt;The currently available RNG kinds are given below.&amp;#160;&lt;span class=&quot;c3&quot;&gt;kind&lt;/span&gt;&amp;#160;is partially matched to this list. The default is&amp;#160;&lt;span class=&quot;c3&quot;&gt;&amp;quot;Mersenne-Twister&amp;quot;&lt;/span&gt;.&lt;/p&gt;&lt;div class=&quot;c8&quot;&gt;&lt;div&gt;&lt;span class=&quot;c3&quot;&gt;&amp;quot;Wichmann-Hill&amp;quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;c9&quot;&gt;&lt;p class=&quot;c8&quot;&gt;The seed,&amp;#160;&lt;span class=&quot;c3&quot;&gt;.Random.seed[-1] == r[1:3]&lt;/span&gt;&amp;#160;is an integer vector of length 3, where each&amp;#160;&lt;span class=&quot;c3&quot;&gt;r[i]&lt;/span&gt;&amp;#160;is in&amp;#160;&lt;span class=&quot;c3&quot;&gt;1:(p[i] - 1)&lt;/span&gt;, where&amp;#160;&lt;span class=&quot;c3&quot;&gt;p&lt;/span&gt;&amp;#160;is the length 3 vector of primes,&amp;#160;&lt;span class=&quot;c3&quot;&gt;p = (30269, 30307, 30323)&lt;/span&gt;. The Wichmann–Hill generator has a cycle length of&amp;#160;&lt;span class=&quot;c10&quot;&gt;6.9536e12&lt;/span&gt;&amp;#160;(=&amp;#160;&lt;span class=&quot;c3&quot;&gt;prod(p-1)/4&lt;/span&gt;, see&amp;#160;&lt;span class=&quot;c10&quot;&gt;Applied Statistics&lt;/span&gt;&amp;#160;(1984)&amp;#160;&lt;span class=&quot;c4&quot;&gt;33&lt;/span&gt;, 123 which corrects the original article).&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;c3&quot;&gt;&amp;quot;Marsaglia-Multicarry&amp;quot;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;c9&quot;&gt;&lt;p class=&quot;c8&quot;&gt;A&amp;#160;&lt;span class=&quot;c10&quot;&gt;multiply-with-carry&lt;/span&gt;&amp;#160;RNG is used, as recommended by George Marsaglia in his post to the mailing list ‘sci.stat.math’. It has a period of more than&amp;#160;&lt;span class=&quot;c10&quot;&gt;2^60&lt;/span&gt;&amp;#160;and has passed all tests (according to Marsaglia). The seed is two integers (all values allowed).&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;c3&quot;&gt;&amp;quot;Super-Duper&amp;quot;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;c9&quot;&gt;&lt;p class=&quot;c8&quot;&gt;Marsaglia's famous Super-Duper from the 70's. This is the original version which does&amp;#160;&lt;span class=&quot;c10&quot;&gt;not&lt;/span&gt;&amp;#160;pass the MTUPLE test of the Diehard battery. It has a period of&amp;#160;&lt;span class=&quot;c10&quot;&gt;about 4.6*10^18&lt;/span&gt;&amp;#160;for most initial seeds. The seed is two integers (all values allowed for the first seed: the second must be odd).&lt;/p&gt;&lt;p class=&quot;c8&quot;&gt;We use the implementation by Reeds&amp;#160;&lt;span class=&quot;c10&quot;&gt;et al&lt;/span&gt;&amp;#160;(1982–84).&lt;/p&gt;&lt;p class=&quot;c8&quot;&gt;The two seeds are the Tausworthe and congruence long integers, respectively. A one-to-one mapping to S's&amp;#160;&lt;span class=&quot;c3&quot;&gt;.Random.seed[1:12]&lt;/span&gt;&amp;#160;is possible but we will not publish one, not least as this generator is&amp;#160;&lt;span class=&quot;c4&quot;&gt;not&lt;/span&gt;&amp;#160;exactly the same as that in recent versions of S-PLUS.&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;c3&quot;&gt;&amp;quot;Mersenne-Twister&amp;quot;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;c9&quot;&gt;&lt;p class=&quot;c8&quot;&gt;From Matsumoto and Nishimura (1998). A twisted GFSR with period&amp;#160;&lt;span class=&quot;c10&quot;&gt;2^19937 - 1&lt;/span&gt;&amp;#160;and equidistribution in 623 consecutive dimensions (over the whole period). The ‘seed’ is a 624-dimensional set of 32-bit integers plus a current position in that set.&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;c3&quot;&gt;&amp;quot;Knuth-TAOCP-2002&amp;quot;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;c9&quot;&gt;&lt;p class=&quot;c8&quot;&gt;A 32-bit integer GFSR using lagged Fibonacci sequences with subtraction. That is, the recurrence used is&lt;/p&gt;&lt;p class=&quot;c11&quot;&gt;&lt;span class=&quot;c10&quot;&gt;X[j] = (X[j-100] - X[j-37]) mod 2^30&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c8&quot;&gt;and the ‘seed’ is the set of the 100 last numbers (actually recorded as 101 numbers, the last being a cyclic shift of the buffer). The period is around&amp;#160;&lt;span class=&quot;c10&quot;&gt;2^129&lt;/span&gt;.&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;c3&quot;&gt;&amp;quot;Knuth-TAOCP&amp;quot;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;c9&quot;&gt;&lt;p class=&quot;c8&quot;&gt;An earlier version from Knuth (1997).&lt;/p&gt;&lt;p class=&quot;c8&quot;&gt;The 2002 version was not backwards compatible with the earlier version: the initialization of the GFSR from the seed was altered.&amp;#160;&lt;span&gt;&lt;span class=&quot;c5&quot;&gt;R&lt;/span&gt;&lt;/span&gt;&amp;#160;did not allow you to choose consecutive seeds, the reported ‘weakness’, and already scrambled the seeds.&lt;/p&gt;&lt;p class=&quot;c8&quot;&gt;Initialization of this generator is done in interpreted&amp;#160;&lt;span&gt;&lt;span class=&quot;c5&quot;&gt;R&lt;/span&gt;&lt;/span&gt;&amp;#160;code and so takes a short but noticeable time.&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;c3&quot;&gt;&amp;quot;L'Ecuyer-CMRG&amp;quot;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;c9&quot;&gt;&lt;p class=&quot;c8&quot;&gt;A ‘combined multiple-recursive generator’ from L'Ecuyer (1999), each element of which is a feedback multiplicative generator with three integer elements: thus the seed is a (signed) integer vector of length 6. The period is around&amp;#160;&lt;span class=&quot;c10&quot;&gt;2^191&lt;/span&gt;.&lt;/p&gt;&lt;p class=&quot;c8&quot;&gt;The 6 elements of the seed are internally regarded as 32-bit unsigned integers. Neither the first three nor the last three should be all zero, and they are limited to less than&amp;#160;&lt;span class=&quot;c3&quot;&gt;4294967087&lt;/span&gt;&amp;#160;and&amp;#160;&lt;span class=&quot;c3&quot;&gt;4294944443&lt;/span&gt;&amp;#160;respectively.&lt;/p&gt;&lt;p class=&quot;c8&quot;&gt;This is not particularly interesting of itself, but provides the basis for the multiple streams used in package&amp;#160;parallel.&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;c3&quot;&gt;&amp;quot;user-supplied&amp;quot;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;c9&quot;&gt;&lt;p class=&quot;c8&quot;&gt;Use a user-supplied generator. See&amp;#160;&lt;a href=&quot;http://127.0.0.1:27579/library/base/help/Random.user&quot; class=&quot;c12&quot;&gt;Random.user&lt;/a&gt;&amp;#160;for details.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c3&quot;&gt;normal.kind&lt;/span&gt;&amp;#160;can be&amp;#160;&lt;span class=&quot;c3&quot;&gt;&amp;quot;Kinderman-Ramage&amp;quot;&lt;/span&gt;,&amp;#160;&lt;span class=&quot;c3&quot;&gt;&amp;quot;Buggy Kinderman-Ramage&amp;quot;&lt;/span&gt;&amp;#160;(not for&amp;#160;&lt;span class=&quot;c3&quot;&gt;set.seed&lt;/span&gt;),&amp;#160;&lt;span class=&quot;c3&quot;&gt;&amp;quot;Ahrens-Dieter&amp;quot;&lt;/span&gt;,&amp;#160;&lt;span class=&quot;c3&quot;&gt;&amp;quot;Box-Muller&amp;quot;&lt;/span&gt;,&amp;#160;&lt;span class=&quot;c3&quot;&gt;&amp;quot;Inversion&amp;quot;&lt;/span&gt;&amp;#160;(the default), or&amp;#160;&lt;span class=&quot;c3&quot;&gt;&amp;quot;user-supplied&amp;quot;&lt;/span&gt;. (For inversion, see the reference in&amp;#160;&lt;a href=&quot;http://127.0.0.1:27579/library/base/help/qnorm&quot; class=&quot;c12&quot;&gt;qnorm&lt;/a&gt;.) The Kinderman-Ramage generator used in versions prior to 1.7.0 (now called&amp;#160;&lt;span class=&quot;c3&quot;&gt;&amp;quot;Buggy&amp;quot;&lt;/span&gt;) had several approximation errors and should only be used for reproduction of old results. The&amp;#160;&lt;span class=&quot;c3&quot;&gt;&amp;quot;Box-Muller&amp;quot;&lt;/span&gt;&amp;#160;generator is stateful as pairs of normals are generated and returned sequentially. The state is reset whenever it is selected (even if it is the current normal generator) and when&amp;#160;&lt;span class=&quot;c3&quot;&gt;kind&lt;/span&gt;&amp;#160;is changed.&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c3&quot;&gt;set.seed&lt;/span&gt;&amp;#160;uses a single integer argument to set as many seeds as are required. It is intended as a simple way to get quite different seeds by specifying small integer arguments, and also as a way to get valid seed sets for the more complicated methods (especially&amp;#160;&lt;span class=&quot;c3&quot;&gt;&amp;quot;Mersenne-Twister&amp;quot;&lt;/span&gt;&amp;#160;and&amp;#160;&lt;span class=&quot;c3&quot;&gt;&amp;quot;Knuth-TAOCP&amp;quot;&lt;/span&gt;). There is no guarantee that different values of&amp;#160;&lt;span class=&quot;c3&quot;&gt;seed&lt;/span&gt;&amp;#160;will seed the RNG differently, although any exceptions would be extremely rare. If called with&amp;#160;&lt;span class=&quot;c3&quot;&gt;seed = NULL&lt;/span&gt;&amp;#160;it re-initializes (see ‘Note’) as if no seed had yet been set.&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;The use of&amp;#160;&lt;span class=&quot;c3&quot;&gt;kind = NULL&lt;/span&gt;&amp;#160;or&amp;#160;&lt;span class=&quot;c3&quot;&gt;normal.kind = NULL&lt;/span&gt;&amp;#160;in&amp;#160;&lt;span class=&quot;c3&quot;&gt;RNGkind&lt;/span&gt;&amp;#160;or&amp;#160;&lt;span class=&quot;c3&quot;&gt;set.seed&lt;/span&gt;&amp;#160;selects the currently-used generator (including that used in the previous session if the workspace has been restored): if no generator has been used it selects&amp;#160;&lt;span class=&quot;c3&quot;&gt;&amp;quot;default&amp;quot;&lt;/span&gt;.&lt;/p&gt;&lt;div class=&quot;c2&quot;&gt;Value&lt;/div&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c3&quot;&gt;.Random.seed&lt;/span&gt;&amp;#160;is an&amp;#160;&lt;a href=&quot;http://127.0.0.1:27579/library/base/help/integer&quot; class=&quot;c12&quot;&gt;integer&lt;/a&gt;&amp;#160;vector whose first element&amp;#160;&lt;span class=&quot;c10&quot;&gt;codes&lt;/span&gt;&amp;#160;the kind of RNG and normal generator. The lowest two decimal digits are in&amp;#160;&lt;span class=&quot;c3&quot;&gt;0:(k-1)&lt;/span&gt;&amp;#160;where&amp;#160;&lt;span class=&quot;c3&quot;&gt;k&lt;/span&gt;&amp;#160;is the number of available RNGs. The hundreds represent the type of normal generator (starting at&amp;#160;&lt;span class=&quot;c3&quot;&gt;0&lt;/span&gt;).&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;In the underlying C,&amp;#160;&lt;span class=&quot;c3&quot;&gt;.Random.seed[-1]&lt;/span&gt;&amp;#160;is&amp;#160;&lt;span class=&quot;c3&quot;&gt;unsigned&lt;/span&gt;; therefore in&amp;#160;&lt;span&gt;&lt;span class=&quot;c5&quot;&gt;R&lt;/span&gt;&lt;/span&gt;&amp;#160;&lt;span class=&quot;c3&quot;&gt;.Random.seed[-1]&lt;/span&gt;&amp;#160;can be negative, due to the representation of an unsigned integer by a signed integer.&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c3&quot;&gt;RNGkind&lt;/span&gt;&amp;#160;returns a two-element character vector of the RNG and normal kinds selected&amp;#160;&lt;span class=&quot;c10&quot;&gt;before&lt;/span&gt;&amp;#160;the call, invisibly if either argument is not&amp;#160;&lt;span class=&quot;c3&quot;&gt;NULL&lt;/span&gt;. A type starts a session as the default, and is selected either by a call to&amp;#160;&lt;span class=&quot;c3&quot;&gt;RNGkind&lt;/span&gt;&amp;#160;or by setting&amp;#160;&lt;span class=&quot;c3&quot;&gt;.Random.seed&lt;/span&gt;&amp;#160;in the workspace.&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c3&quot;&gt;RNGversion&lt;/span&gt;&amp;#160;returns the same information as&amp;#160;&lt;span class=&quot;c3&quot;&gt;RNGkind&lt;/span&gt;&amp;#160;about the defaults in a specific&amp;#160;&lt;span&gt;&lt;span class=&quot;c5&quot;&gt;R&lt;/span&gt;&lt;/span&gt;&amp;#160;version.&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c3&quot;&gt;set.seed&lt;/span&gt;&amp;#160;returns&amp;#160;&lt;span class=&quot;c3&quot;&gt;NULL&lt;/span&gt;, invisibly.&lt;/p&gt;&lt;div class=&quot;c2&quot;&gt;Note&lt;/div&gt;&lt;p class=&quot;c1&quot;&gt;Initially, there is no seed; a new one is created from the current time and the process ID when one is required. Hence different sessions will give different simulation results, by default. However, the seed might be restored from a previous session if a previously saved workspace is restored.&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c3&quot;&gt;.Random.seed&lt;/span&gt;&amp;#160;saves the seed set for the uniform random-number generator, at least for the system generators. It does not necessarily save the state of other generators, and in particular does not save the state of the Box–Muller normal generator. If you want to reproduce work later, call&amp;#160;&lt;span class=&quot;c3&quot;&gt;set.seed&lt;/span&gt;&amp;#160;(preferably with explicit values for&amp;#160;&lt;span class=&quot;c3&quot;&gt;kind&lt;/span&gt;&amp;#160;and&amp;#160;&lt;span class=&quot;c3&quot;&gt;normal.kind&lt;/span&gt;) rather than set&amp;#160;&lt;span class=&quot;c3&quot;&gt;.Random.seed&lt;/span&gt;.&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;The object&amp;#160;&lt;span class=&quot;c3&quot;&gt;.Random.seed&lt;/span&gt;&amp;#160;is only looked for in the user's workspace.&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;Do not rely on randomness of low-order bits from RNGs. Most of the supplied uniform generators return 32-bit integer values that are converted to doubles, so they take at most&amp;#160;&lt;span class=&quot;c10&quot;&gt;2^32&lt;/span&gt;&amp;#160;distinct values and long runs will return duplicated values (Wichmann-Hill is the exception, and all give at least 30 varying bits.)&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;" RHelpText="help(set.seed, package=base)" Background="#FFEEEFFF" xmlns="clr-namespace:BSky.Controls;assembly=BSky.Controls" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation"><BSkyLabel Name="l1" Text="Set random number generator seed" Width="200" Height="31" Left="0" Top="1" CanExecute="False" FontFamily="Segoe UI" FontSize="12" av:Canvas.Left="0" av:Canvas.Top="1">Set random number generator seed</BSkyLabel><BSkySpinnerCtrl Syntax="{x:Null}" Enabled="True" Name="seedspinner" Text="19341" Step="0" Width="83" Height="22" Left="6" Top="32" CanExecute="True" av:Canvas.Left="6" av:Canvas.Top="32"></BSkySpinnerCtrl></BSkyCanvas>